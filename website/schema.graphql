# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Chain {
    "story factory address"
    factoryAddress: String!
    "finds token address (mint)"
    findsAddress: String!
    "chain readable name"
    name: String!
    "task module type."
    taskModule: TaskModuleType!
    "chain identifier"
    type: String!
}

type IpfsResult {
    cid: String!
    url: String!
}

type Jwt {
    expiresIn: Int!
    token: String!
}

type Mutation {
    cancelStoryTask(id: Float!): StoryTask!
    createStoryTask(chain: String!, chainStoryId: String!, description: String!, title: String!): StoryTask!
    createTaskSubmit(content: String!, taskId: Int!): StoryTaskSubmit!
    doneStoryTask(id: Float!, submitIds: [Int!]!): StoryTask!
    login(account: String!, chain: String!, message: String!, pubkey: String, signature: String!): Jwt!
    metadataUriPrefix(amount: Int!, chain: String!, description: String!, image: String!, name: String!): IpfsResult!
    removeTaskSubmit(id: Int!): Boolean!
    "returns null if no story on chain."
    syncStoryContentHash(chain: String!, chainStoryId: String!): Story
    "returns null if no story nft sale on chain."
    syncStoryNftSale(chain: String!, chainStoryId: String!): Story
    updateStoryTask(description: String, id: Int!, title: String): StoryTask!
}

type NftSale {
    authorClaimed: Int!
    authorReserved: Int!
    chain: String!
    chainStoryId: String!
    createTime: DateTime!
    image: String!
    name: String!
    nftSaleAddr: String!
    price: String!
    sold: Int!
    total: Int!
    type: Float!
    updateTime: DateTime!
    uriPrefix: String!
}

type Query {
    chain(chain: String!): Chain
    chainTask(chain: String!, chainStoryId: String!, chainTaskId: String!): StoryChainTask
    chainTasks(chain: String!, chainStoryId: String!): [StoryChainTask!]!
    chains: [Chain!]!
    chapter(id: Int!): StoryChapter!
    "return user info if x-token is valid."
    currentUser: User
    stories(author: [String!], chain: [String!], sort: StorySort): [Story!]!
    story(chain: String!, chainStoryId: String!): Story
    storyTask(id: Float!): StoryTask
    storyTasks(chain: String!, chainStoryId: String!): [StoryTask!]!
}

type Story {
    author: String!
    chain: String!
    chainInfo: Chain!
    chainStoryId: String!
    contentHash: String!
    createTime: DateTime!
    info: StoryInfo
    nft: NftSale
    onChainAddr: String!
    updateTime: DateTime!
}

type StoryChainTask {
    account: String!
    chain: String!
    chainStoryId: String!
    chainTaskId: String!
    cid: String!
    createTime: DateTime!
    creator: String!
    description: String!
    nft: String!
    rewardNfts: [String!]!
    status: StoryChainTaskStatus!
    submits: [StoryChainTaskSubmit!]!
    title: String!
    updateTime: DateTime!
}

type StoryChainTaskSubmit {
    account: String!
    chain: String!
    chainStoryId: String!
    chainSubmitId: String!
    chainTaskId: String!
    cid: String!
    content: String!
    createTime: DateTime!
    creator: String!
    status: StoryChainTaskSubmitStatus!
    updateTime: DateTime!
}

type StoryChapter {
    content: String!
    createAt: DateTime!
    id: Int!
    info: StoryInfo!
    name: String!
    updateAt: DateTime!
}

type StoryInfo {
    chain: String!
    chainStoryId: String!
    chapters: [StoryChapter!]!
    contentHash: String!
    cover: String!
    createAt: DateTime!
    description: String!
    id: Int!
    title: String!
    updateAt: DateTime!
}

type StoryTask {
    chain: String!
    chainStoryId: String!
    description: String!
    id: Int!
    status: StoryTaskStatus!
    submits: [StoryTaskSubmit!]!
    title: String!
}

type StoryTaskSubmit {
    account: String!
    content: String!
    createTime: DateTime!
    id: Int!
    status: StoryTaskSubmitStatus!
    taskId: Int!
}

type User {
    account: String!
    chain: String!
}

enum StoryChainTaskStatus {
    Cancelled
    Done
    Todo
}

enum StoryChainTaskSubmitStatus {
    Approved
    Pending
    Rejected
    Withdrawed
}

enum StorySort {
    Hotest
    Latest
}

enum StoryTaskStatus {
    Cancelled
    Done
    Todo
}

enum StoryTaskSubmitStatus {
    Approved
    Pending
    Rejected
}

enum TaskModuleType {
    Basic
    Chain
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime
